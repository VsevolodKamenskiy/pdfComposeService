// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.13.0
// source: api/pdf_compose.proto

package pdf_compose

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PdfComposeService_Compose_FullMethodName = "/pdfCompose.PdfComposeService/Compose"
)

// PdfComposeServiceClient is the client API for PdfComposeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PdfComposeServiceClient interface {
	Compose(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ComposeRequest, ComposeResponse], error)
}

type pdfComposeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPdfComposeServiceClient(cc grpc.ClientConnInterface) PdfComposeServiceClient {
	return &pdfComposeServiceClient{cc}
}

func (c *pdfComposeServiceClient) Compose(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ComposeRequest, ComposeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PdfComposeService_ServiceDesc.Streams[0], PdfComposeService_Compose_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ComposeRequest, ComposeResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PdfComposeService_ComposeClient = grpc.BidiStreamingClient[ComposeRequest, ComposeResponse]

// PdfComposeServiceServer is the server API for PdfComposeService service.
// All implementations must embed UnimplementedPdfComposeServiceServer
// for forward compatibility.
type PdfComposeServiceServer interface {
	Compose(grpc.BidiStreamingServer[ComposeRequest, ComposeResponse]) error
	mustEmbedUnimplementedPdfComposeServiceServer()
}

// UnimplementedPdfComposeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPdfComposeServiceServer struct{}

func (UnimplementedPdfComposeServiceServer) Compose(grpc.BidiStreamingServer[ComposeRequest, ComposeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Compose not implemented")
}
func (UnimplementedPdfComposeServiceServer) mustEmbedUnimplementedPdfComposeServiceServer() {}
func (UnimplementedPdfComposeServiceServer) testEmbeddedByValue()                           {}

// UnsafePdfComposeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PdfComposeServiceServer will
// result in compilation errors.
type UnsafePdfComposeServiceServer interface {
	mustEmbedUnimplementedPdfComposeServiceServer()
}

func RegisterPdfComposeServiceServer(s grpc.ServiceRegistrar, srv PdfComposeServiceServer) {
	// If the following call pancis, it indicates UnimplementedPdfComposeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PdfComposeService_ServiceDesc, srv)
}

func _PdfComposeService_Compose_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PdfComposeServiceServer).Compose(&grpc.GenericServerStream[ComposeRequest, ComposeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PdfComposeService_ComposeServer = grpc.BidiStreamingServer[ComposeRequest, ComposeResponse]

// PdfComposeService_ServiceDesc is the grpc.ServiceDesc for PdfComposeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PdfComposeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pdfCompose.PdfComposeService",
	HandlerType: (*PdfComposeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Compose",
			Handler:       _PdfComposeService_Compose_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/pdf_compose.proto",
}
